#! /bin/dash

XDG_AUR_HOME=${XDG_AUR_HOME:-~/src/aur}
BROWSER=${BROWSER:-web_browser}
OWL_MAX_URL=${OWL_MAX_URL:-16}

usage() {
    printf "usage: $(basename "$0") <action> [...]\n"
    exit 1
}

if [ $# -lt 1 ]; then
    usage
fi

action=$1
shift
tmp_out=/tmp/owl.$$

getinfos() {
    while [ $# -gt 0 ]; do
        pacman -Si "$1" > "$tmp_out" 2>&1
        if [ $? -ne 0 ]; then
            cower -i "$1" > "$tmp_out" 2>&1
            if [ $? -ne 0 ]; then
                echo "package '$1' was not found" >&2
                exit 1
            fi
        fi
        cat "$tmp_out"
        : > "$tmp_out"
        shift
    done
}

case $action in
    u|U|update)
        if [ "$action" = "U" ]; then
            cower -u
        else
            sudo pacman -Syu
        fi
        ;;
    i|info)
        getinfos "$@"
        ;;
    l|L|list)
        pattern='.'
        if [ "$action" = "L" ]; then
            pattern=$1
            shift
        fi
        pacman -Qlq "$@" | grep -i "$pattern"
        ;;
    q|Q|query)
        if [ "$action" = "Q" ]; then
            pacman -Qs "$@"
        else
            pacman -Qsq "$@"
        fi
        ;;
    f|F|find)
        pacman -Ss "$@"
        [ $? -ne 0 -a "$action" = "F" ] && cower -s "$@"
        ;;
    s|S|search)
        [ "$action" = "S" ] && pacman -Ss "$@"
        cower -s "$@"
        ;;
    o|owner)
        pacman -Qo "$@"
        ;;
    g|grep)
        pattern=$1
        shift
        pkg_files=$(pacman -Qlq "$@")
        if [ $? -eq 0 ]; then
            [ ! "$pattern" = "\n" ] && grep -Ii "$pattern" $pkg_files
        fi
        ;;
    d|D|download)
        cd "$XDG_AUR_HOME"
        if [ "$action" = "D" ]; then
            cower -ddf "$@"
        else
            cower -df "$@"
        fi
        ;;
    r|R|remove)
        if [ "$action" = "R" ]; then
            sudo pacman -Rs "$@"
        else
            sudo pacman -R "$@"
        fi
        ;;
    a|add)
        while [ $# -gt 0 ]; do
            pacman -Si "$1" > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                sudo pacman -S "$1"
                [ $? -ne 0 ] && exit 1
            else
                cd "$XDG_AUR_HOME"
                cower -ddf "$1" > "$tmp_out" 2> /dev/null

                if [ -s "$tmp_out" ]; then
                    list_of_programs=$(cat "$tmp_out" | tac | sed 's/.* \([^ ]\+\) downloaded.*/\1/')
                    for i in $list_of_programs; do
                        cd "$XDG_AUR_HOME/$i"
                        makepkg -ifs
                        [ $? -ne 0 ] && exit 1
                    done
                    : > "$tmp_out"
                else
                    echo "package '$1' was not found" >&2
                fi
            fi
            shift
        done
        ;;
    leftovers)
        log_lo=$(grep -Eo '/[[:graph:]]+\.pac(new|orig|save)' /var/log/pacman.log | sort -u)
        for i in $log_lo
        do
            if [ -e "$i" ]; then
                echo -n "merge '$i' [y/N]? "
                read merge_leftover
                case "$merge_leftover" in
                    y|yes|Y|Yes)
                        vimdiff "${i%.*}" "$i"
                        ;;
                esac
                echo -n "remove '$i' [y/N]? "
                read remove_leftover
                case "$remove_leftover" in
                    y|yes|Y|Yes)
                        sudo rm "$i"
                        ;;
                esac
            fi
        done
        ;;
    p|page)
        while [ $# -gt 0 ]; do
            uri=$(getinfos "$1" | grep -m 1 -o 'https://aur.*')
            if [ -n "$uri" ]; then
                $BROWSER $uri > /dev/null 2>&1
            else
                echo "package '$1' is not in AUR" >&2
            fi
            shift
        done
        ;;
    h|H|home)
        if [ $action = "H" ]; then
            pkg_list=$(pacman -Ssq "$@"; cower -sq "$@")
            if [ -n "$pkg_list" ]; then
                set $pkg_list
            fi
        fi
        counter=0
        while [ $# -gt 0 ]; do
            uri=$(getinfos "$1" | grep -m 1 -o 'https\?://.*')
            if [ -n "$uri" ]; then
                echo "$1: $uri"
                $BROWSER $uri > /dev/null 2>&1
                counter=$((counter+1))
            fi
            shift
            if [ $((counter % OWL_MAX_URL)) -eq 0 -a $counter -gt 0 -a $# -gt 0 ]; then
                echo -n "continue [Y/n] ($# remaining)?"
                read answer
                [ -z "$answer" ] && answer='y'

                case "$answer" in
                    y|Y|yes|Yes)
                        :
                        ;;
                    *)
                        exit 0
                        ;;
                esac
            fi
        done
        ;;
    b|bin)
        pacman -Qlq "$@" | grep '/s\?bin/.'
        ;;
    e|etc)
        pacman -Qlq "$@" | grep '/etc/.'
        ;;
    m|man)
        pacman -Qlq "$@" | grep '/man./.'
        ;;
    foreigns)
        pacman -Qmq
        ;;
    orphans)
        pacman -Qdtq
        ;;
    *)
        echo "action '$action' is unknown" >&2
        exit 1
        ;;
esac
