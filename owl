#! /bin/dash

XDG_AUR_HOME=${XDG_AUR_HOME:-"$HOME/src/aur"}
XDG_PACMAN_CACHE=${XDG_PACMAN_CACHE:-/var/cache/pacman/pkg}
BROWSER=${BROWSER:-web_browser}
OWL_MAX_URL=${OWL_MAX_URL:-16}
OWL_SUDO_WARN=${OWL_SUDO_WARN:-true}
OWL_IGNORE_OUTDATED=${OWL_IGNORE_OUTDATED:-false}
OWL_CLEAN_UP=${OWL_CLEAN_UP:-false}
PACMAN_LOG="/var/log/pacman.log"

usage() {
    printf "usage: %s <action> [...]\n" "${0##*/}"
    exit 1
}

printc() {
    color=$1
    shift
    if [ -t 1 ] ; then
        printf "\033[%sm%s\033[0m" "$color" "$@"
    else
        printf "%s" "$@"
    fi
}

white() {
    printc "1;37" "$@"
}

green() {
    printc "1;32" "$@"
}

magenta() {
    printc "1;35" "$@"
}

missing_pkg() {
    printf "package '%s' was not found\n" "$@" >&2
} 

warning() {
    magenta "==>"
    white " $@"
}

sudorun() {
    if [ "$OWL_SUDO_WARN" = "true" ] ; then
        warning "Running sudo"
        printf "\n"
    fi
    sudo $@
}

if [ $# -lt 1 ] ; then
    usage
fi

action=$1
shift
tmp_out=/tmp/owl.$$

getinfos() {
    extended_infos=0
    pacopt=-Si
    cowopt=-i
    while getopts "e-:" opt ; do
        case $opt in
            e)
                extended_infos=1
                ;;
            -)
                case $OPTARG in
                    extended)
                        extended_infos=1
                        ;;
                esac
                ;;
        esac
    done

    shift $((OPTIND - 1))

    if [ $extended_infos -eq 1 ] ; then
        pacopt=-Sii
        cowopt=-ii
    fi

    while [ $# -gt 0 ] ; do
        pacman $pacopt "$1" > "$tmp_out" 2>&1
        if [ $? -ne 0 ] ; then
            cower $cowopt "$1" > "$tmp_out" 2>&1
            if [ $? -ne 0 ] ; then
                missing_pkg "$1"
                exit 1
            fi
        fi
        cat "$tmp_out"
        : > "$tmp_out"
        shift
    done
}

quiet_results=0
aur_only=0
repo_only=0
local_only=0
ignore_outdated=0
fetch_deps=0
rm_cascade=0
rm_recur=0
crawl_homes=0

while getopts "qaolidcsw-:" opt ; do
    case $opt in
        q)
            quiet_results=1
            ;;
        a)
            aur_only=1
            ;;
        o)
            repo_only=1
            ;;
        l)
            local_only=1
            ;;
        i)
            ignore_outdated=1
            ;;
        d)
            fetch_deps=1
            ;;
        c)
            rm_cascade=1
            ;;
        s)
            rm_recur=1
            ;;
        w)
            crawl_homes=1
            ;;
        -)
            case $OPTARG in
                quiet)
                    quiet_results=1
                    ;;
                aur)
                    aur_only=1
                    ;;
                repo)
                    repo_only=1
                    ;;
                local)
                    local_only=1
                    ;;
                ignore-outdated)
                    ignore_outdated=1
                    ;;
                dependencies)
                    fetch_deps=1
                    ;;
                cascade)
                    rm_cascade=1
                    ;;
                recursive)
                    rm_recur=1
                    ;;
                crawl-homes)
                    crawl_homes=1
                    ;;
            esac
            ;;
    esac
done

shift $(($OPTIND - 1))

case $action in
    update)
        if [ $aur_only -eq 1 ] ; then
            cower -u | tee "$tmp_out"
            if [ -s "$tmp_out" ] ; then
                    printf "reinstall packages? [Y/n] "
                    read answer
                    [ -z "$answer" ] && answer='yes'
                    case $answer in 
                        y|Y|yes|Yes)
                            owl install $(cat "$tmp_out" | sed 's/^:: *\([^ ]\+\) .*$/\1/' | xargs)
                            ;;
                    esac
            fi
        else
            sudorun pacman -Syu
        fi
        ;;
    pull)
        repos=$(find "$XDG_AUR_HOME" -mindepth 3 -maxdepth 3 -type d -regex ".*/src/[^/]+" | grep -v '\-build$')
        for repo in $repos ; do
            [ ! -e "$repo" ] && continue
            from_home=${repo#"$XDG_AUR_HOME/"}
            pkgname=${from_home%%/*}
            pacman -Q "$pkgname" > /dev/null 2>&1
            if [ $? -eq 1 ] ; then
                magenta "==> "
                white "$pkgname "
                printf "%s\n" "is not installed"
                printf "%s" "remove it from the cache [y/N]? "
                read answer
                case "$answer" in
                    y|Y|yes|Yes)
                        rm -vrf "$XDG_AUR_HOME/$pkgname"
                        ;;
                esac
                continue
            fi
            green "$pkgname"
            printf "\n"
            if owl_update_repository "$repo" ; then
                printf "reinstall package '%s' [Y/n]? " "$pkgname"
                read answer
                [ -z "$answer" ] && answer="yes"
                case "$answer" in
                    y|yes|Y|Yes)
                        cd "$XDG_AUR_HOME/$pkgname"
                        makepkg -ifs
                        ;;
                esac
            fi
        done
        ;;
    info)
        if [ $local_only -eq 1 ] ; then
            pacman -Qi "$@"
        else
            getinfos "$@"
        fi
        ;;
    list | lsgrep)
        pattern='.'
        if [ "$action" = "lsgrep" ] ; then
            pattern=$1
            shift
        fi
        pacman -Qlq "$@" | grep -i "$pattern"
        ;;
    query | search)
        if [ "$action" = "query" ] ; then
            if [ $quiet_results -eq 1 ] ; then
                pacman -Qsq "$@"
            else
                pacman -Qs "$@" | owl_color_filter
            fi
        elif [ "$action" = "search" ] ; then
            if [ $aur_only -eq 0 ] ; then
                if [ $quiet_results -eq 1 ] ; then
                    pacman -Ssq "$@"
                else
                    pacman -Ss "$@" | owl_color_filter
                fi
            fi
            if [ $repo_only -eq 0 ] ; then
                if [ $quiet_results -eq 1 ] ; then
                    if [ $ignore_outdated -eq 1 -o "$OWL_IGNORE_OUTDATED" = "true" ] ; then
                        cower -osq "$@"
                    else
                        cower -sq "$@"
                    fi
                else
                    if [ $ignore_outdated -eq 1 -o "$OWL_IGNORE_OUTDATED" = "true" ] ; then
                        cower -os "$@" | owl_color_filter
                    else
                        cower -s "$@" | owl_color_filter
                    fi
                fi
            fi
        fi
        ;;
    owns)
        pacopt="-Qo"
        [ $quiet_results -eq 1 ] && pacopt="-Qoq"
        pacman $pacopt "$@"
        ;;
    version | repository | category | description | license)
        cmd=getinfos
        [ $local_only -eq 1 ] && cmd="pacman -Qi"
        $cmd "$@" | grep -i "^$action" | sed 's/[^:]\+: \(.*\)/\1/'
        ;;
    grep)
        pattern=$1
        shift
        pkg_files=$(pacman -Qlq "$@")
        if [ $? -eq 0 ] ; then
            [ ! "$pattern" = "\n" ] && grep -Ii "$pattern" $pkg_files 2> /dev/null
        fi
        ;;
    downgrade)
        if [ ! -d "$XDG_PACMAN_CACHE" ] ; then
            printf "%s\n" "pacman's cache directory doesn't exist" >&2
            exit 1
        fi
        while [ $# -gt 0 ] ; do
            pkgname=$1
            pacman -Q "$pkgname" > /dev/null 2>&1
            if [ $? -ne 0 ] ; then
                missing_pkg "$pkgname"
                exit 1
            fi
            previous_pkg=$(ls -1tc "$XDG_PACMAN_CACHE/$pkgname"-[0-9]* 2> /dev/null | head -n 2 | tail -n 1)
            if [ -e "$previous_pkg" ] ; then
                printf "%s\n" "$previous_pkg" >> "$tmp_out"
            fi
            shift
        done
        if [ -s "$tmp_out" ] ; then
            sudorun pacman -U $(cat "$tmp_out")
            : > "$tmp_out"
        fi
        ;;
    remove | uninstall)
        if [ $rm_cascade -eq 1 ] ; then
            sudorun pacman -Rc "$@"
        elif [ $rm_recur -eq 1 ] ; then
            sudorun pacman -Rs "$@"
        else
            sudorun pacman -R "$@"
        fi
        ;;
    download)
        if [ $fetch_deps -eq 1 ] ; then
            cower -ddf -t "$XDG_AUR_HOME" "$@"
        else
            cower -df -t "$XDG_AUR_HOME" "$@"
        fi
        ;;
    install | upgrade)
        while [ $# -gt 0 ] ; do
            if [ "$action" = "upgrade" ] ; then
                pacman -Q "$1" > /dev/null 2>&1
                if [ $? -ne 0 ] ; then
                    magenta "==> "
                    white "$1 "
                    printf "%s\n" "is not installed"
                    shift
                    continue
                fi
            fi
            pacman -Si "$1" > /dev/null 2>&1
            if [ $? -eq 0 ] ; then
                sudorun pacman -S "$1"
                [ $? -ne 0 ] && exit 1
            else
                cower -ddf -t "$XDG_AUR_HOME" "$1" | tee "$tmp_out"
                if [ -s "$tmp_out" ] ; then
                    list_of_programs=$(cat "$tmp_out" | tac | sed 's/.* \([^ ]\+\) downloaded.*/\1/') 
                    for pkgname in $list_of_programs; do
                        cd "$XDG_AUR_HOME/$pkgname"
                        if [ "$OWL_CLEAN_UP" = "true" ] ; then
                            makepkg -ifsc
                        else
                            makepkg -ifs
                        fi
                        [ $? -ne 0 ] && exit 1
                    done
                    : > "$tmp_out"
                else
                    missing_pkg "$1"
                fi
            fi
            shift
        done
        ;;
    leftovers)
        log_lo=$(grep -Eo '/[[:graph:]]+\.pac(new|orig|save)' "$PACMAN_LOG" | sort -u)
        for i in $log_lo
        do
            if [ -e "$i" ] ; then
                ext=${i##*.}
                if [ "$ext" != "pacsave" ] ; then
                    printf "merge '%s' [y/N]? " "$i"
                    read answer
                    case "$answer" in
                        y|yes|Y|Yes)
                            vimdiff "${i%.*}" "$i"
                            ;;
                    esac
                fi
                printf "remove '%s' [y/N]? " "$i"
                read answer
                case "$answer" in
                    y|yes|Y|Yes)
                        sudorun rm "$i"
                        ;;
                esac
            fi
        done
        ;;
    page)
        while [ $# -gt 0 ] ; do
            uri=$(getinfos "$1" | grep -m 1 -o 'https://aur.*') > /dev/null 2>&1
            if [ -n "$uri" ] ; then
                $BROWSER $uri > /dev/null 2>&1
            else
                printf "package '%s' is not in AUR\n" "$1" >&2
            fi
            shift
        done
        ;;
    home)
        if [ $crawl_homes -eq 1 ] ; then
            pkg_list=$(pacman -Ssq "$@"; cower -sq "$@") 
            if [ -n "$pkg_list" ] ; then
                set $pkg_list
            fi
        fi
        counter=0
        while [ $# -gt 0 ] ; do
            uri=$(getinfos "$1" | grep -m 1 -o 'https\?://.*')
            if [ -n "$uri" ] ; then
                printf "%s: %s\n" "$1" "$uri"
                $BROWSER $uri > /dev/null 2>&1
                counter=$((counter+1))
            fi
            shift
            if [ $((counter % OWL_MAX_URL)) -eq 0 -a $counter -gt 0 -a $# -gt 0 ] ; then
                printf "continue [Y/n] (%i remaining)? " "$#"
                read answer
                [ -z "$answer" ] && answer='y'

                case "$answer" in
                    y|Y|yes|Yes)
                        :
                        ;;
                    *)
                        exit 0
                        ;;
                esac
            fi
        done
        ;;
    last)
        num=${@:-7}
        awk '/\] (installed|upgraded) / { match($0, /\] (installed|upgraded) ([^ ]+)/, groups); print groups[2]; }' "$PACMAN_LOG" | tail -n "$num"
        ;;
    deps)
        cmd="getinfos --extended"
        [ $local_only -eq 1 ] && cmd="pacman -Qi"
        $cmd "$@" | grep -i '^depends on' | sed 's/[^:]\+: \(.*\)/\1/'
        ;;
    uses)
        cmd="getinfos --extended"
        [ $local_only -eq 1 ] && cmd="pacman -Qii"
        $cmd "$@" | grep -i '^required by' | sed 's/[^:]\+: \(.*\)/\1/'
        ;;
    check)
        pacman -Qk "$@"
        ;;
    binlist)
        pacman -Qlq "$@" | grep '/s\?bin/.*[^/]$'
        ;;
    liblist)
        pacman -Qlq "$@" | grep '/lib/.*[^/]$'
        ;;
    etclist)
        pacman -Qlq "$@" | grep '/etc/.*[^/]$'
        ;;
    manlist)
        pacman -Qlq "$@" | grep '/man./.*[^/]$'
        ;;
    doclist)
        pacman -Qlq "$@" | grep '/share/doc/[^/]\+/.*[^/]$'
        ;;
    refresh)
        sudorun pacman -Syy
        ;;
    cleanup)
        if [ ! -d "$XDG_AUR_HOME" ] ; then
            printf "%s\n" "the cache directory is invalid" >&2
            exit 1
        fi
        cd "$XDG_AUR_HOME"
        for pkgname in * ; do
            if [ -d "$pkgname" ] ; then
                pacman -Q "$pkgname" > /dev/null 2>&1
                [ $? -eq 1 ] && rm -vrf -- "$pkgname"
            fi
        done
        ;;
    foreigns)
        if [ $quiet_results -eq 1 ] ; then
            pacman -Qmq
        else
            pacman -Qm
        fi
        ;;
    orphans)
        if [ $quiet_results -eq 1 ] ; then
            pacman -Qdtq
        else
            pacman -Qdt
        fi
        ;;
    *)
        printf "action '%s' is unknown\n" "$action" >&2
        exit 1
        ;;
esac
