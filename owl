#! /bin/dash

XDG_AUR_HOME=${XDG_AUR_HOME:-~/src/aur}
BROWSER=${BROWSER:-web_browser}
OWL_MAX_URL=${OWL_MAX_URL:-16}
OWL_SUDO_WARN=${OWL_SUDO_WARN:-true}
OWL_IGNORE_OUTDATED=${OWL_IGNORE_OUTDATED:-false}

usage() {
    printf "usage: $(basename "$0") <action> [...]\n"
    exit 1
}

white() {
    printf "\033[1;37m%s\033[0m" "$@"
}

green() {
    printf "\033[1;32m%s\033[0m" "$@"
}

magenta() {
    printf "\033[1;35m%s\033[0m" "$@"
}

warning() {
    if [ -t 1 ] ; then
        printf "$(magenta '==>') $(white "$@")"
    else
        printf "==> $@"
    fi
}

sudorun() {
    if [ "$OWL_SUDO_WARN" = "true" ] ; then
        warning "Running sudo\n"
    fi
    sudo $@
}

if [ $# -lt 1 ] ; then
    usage
fi

action=$1
shift
tmp_out=/tmp/owl.$$

getinfos() {
    while [ $# -gt 0 ] ; do
        pacman -Si "$1" > "$tmp_out" 2>&1
        if [ $? -ne 0 ] ; then
            cower -i "$1" > "$tmp_out" 2>&1
            if [ $? -ne 0 ] ; then
                echo "package '$1' was not found" >&2
                exit 1
            fi
        fi
        cat "$tmp_out"
        : > "$tmp_out"
        shift
    done
}

quiet_results=0
aur_only=0
repo_only=0
local_only=0
ignore_outdated=0
fetch_deps=0
rm_cascade=0
rm_recur=0
crawl_homes=0

while getopts "qaolidcsw-:" opt ; do
    case $opt in
        q)
            quiet_results=1
            ;;
        a)
            aur_only=1
            ;;
        o)
            repo_only=1
            ;;
        l)
            local_only=1
            ;;
        i)
            ignore_outdated=1
            ;;
        d)
            fetch_deps=1
            ;;
        c)
            rm_cascade=1
            ;;
        s)
            rm_recur=1
            ;;
        w)
            crawl_homes=1
            ;;
        -)
            case $OPTARG in
                quiet)
                    quiet_results=1
                    ;;
                aur)
                    aur_only=1
                    ;;
                repo)
                    repo_only=1
                    ;;
                local)
                    local_only=1
                    ;;
                ignore-outdated)
                    ignore_outdated=1
                    ;;
                dependencies)
                    fetch_deps=1
                    ;;
                cascade)
                    rm_cascade=1
                    ;;
                recursive)
                    rm_recur=1
                    ;;
                crawl-homes)
                    crawl_homes=1
                    ;;
            esac
            ;;
    esac
done

shift $(($OPTIND - 1))

case $action in
    update)
        if [ $aur_only -eq 1 ] ; then
            cower -u | tee "$tmp_out"
            if [ -s "$tmp_out" ] ; then
                    printf "reinstall packages? [Y/n] "
                    read answer
                    [ -z "$answer" ] && answer='yes'
                    case $answer in 
                        y|Y|yes|Yes)
                            owl install $(cat "$tmp_out" | sed 's/^:: *\([^ ]\+\) .*$/\1/' | xargs)
                            ;;
                    esac
            fi
        else
            sudorun pacman -Syu
        fi
        ;;
    pull)
        repos=$(find "$XDG_AUR_HOME" -mindepth 3 -maxdepth 3 -type d -regex ".*/src/[^/]+" | grep -v '\-build$')
        for repo in $repos ; do
            [ ! -e "$repo" ] && continue
            from_home=${repo#"$XDG_AUR_HOME/"}
            pkgname=${from_home%%/*}
            pacman -Q "$pkgname" > /dev/null 2>&1
            if [ $? -eq 1 ] ; then
                if [ -t 1 ] ; then
                    magenta "==> "
                    white "$pkgname "
                else
                    printf "%s" "==> $pkgname "
                fi
                printf "%s\n" "is not installed"
                printf "%s" "remove it from the cache [y/N]? "
                read answer
                case "$answer" in
                    y|Y|yes|Yes)
                        rm -vrf "$XDG_AUR_HOME/$pkgname"
                        ;;
                esac
                continue
            fi
            if [ -t 1 ] ; then
                green "$pkgname"
                printf "\n"
            else
                printf "%s\n" "$pkgname"
            fi
            if owl_update_repository "$repo" ; then
                echo -n "reinstall package '$pkgname' [Y/n]? "
                read answer
                [ -z "$answer" ] && answer="yes"
                case "$answer" in
                    y|yes|Y|Yes)
                        cd "$XDG_AUR_HOME/$pkgname"
                        makepkg -ifs
                        ;;
                esac
            fi
        done
        ;;
    info)
        if [ $local_only -eq 1 ] ; then
            pacman -Qi "$@"
        else
            getinfos "$@"
        fi
        ;;
    list | lsgrep)
        pattern='.'
        if [ "$action" = "lsgrep" ] ; then
            pattern=$1
            shift
        fi
        pacman -Qlq "$@" | grep -i "$pattern"
        ;;
    query | search)
        if [ "$action" = "query" ] ; then
            if [ $quiet_results -eq 1 ] ; then
                pacman -Qsq "$@"
            else
                pacman -Qs "$@" | owl_color_filter
            fi
        elif [ "$action" = "search" ] ; then
            if [ $aur_only -eq 0 ] ; then
                if [ $quiet_results -eq 1 ] ; then
                    pacman -Ssq "$@"
                else
                    pacman -Ss "$@" | owl_color_filter
                fi
            fi
            if [ $repo_only -eq 0 ] ; then
                if [ $quiet_results -eq 1 ] ; then
                    if [ $ignore_outdated -eq 1 -o "$OWL_IGNORE_OUTDATED" = "true" ] ; then
                        cower -osq "$@"
                    else
                        cower -sq "$@"
                    fi
                else
                    if [ $ignore_outdated -eq 1 -o "$OWL_IGNORE_OUTDATED" = "true" ] ; then
                        cower -os "$@" | owl_color_filter
                    else
                        cower -s "$@" | owl_color_filter
                    fi
                fi
            fi
        fi
        ;;
    owns)
        pacman -Qo "$@"
        ;;
    version | repository | category | description)
        getinfos "$@" | grep -i "^$action" | sed 's/[^:]\+: \(.*\)/\1/'
        ;;
    grep)
        pattern=$1
        shift
        pkg_files=$(pacman -Qlq "$@")
        if [ $? -eq 0 ] ; then
            [ ! "$pattern" = "\n" ] && grep -Ii "$pattern" $pkg_files 2> /dev/null
        fi
        ;;
    download)
        if [ $fetch_deps -eq 1 ] ; then
            cower -ddf -t "$XDG_AUR_HOME" "$@"
        else
            cower -df -t "$XDG_AUR_HOME" "$@"
        fi
        ;;
    remove)
        if [ $rm_cascade -eq 1 ] ; then
            sudorun pacman -Rc "$@"
        elif [ $rm_recur -eq 1 ] ; then
            sudorun pacman -Rs "$@"
        else
            sudorun pacman -R "$@"
        fi
        ;;
    install)
        while [ $# -gt 0 ] ; do
            pacman -Si "$1" > /dev/null 2>&1
            if [ $? -eq 0 ] ; then
                sudorun pacman -S "$1"
                [ $? -ne 0 ] && exit 1
            else
                cower -ddf -t "$XDG_AUR_HOME" "$1" | tee "$tmp_out"
                if [ -s "$tmp_out" ] ; then
                    list_of_programs=$(cat "$tmp_out" | tac | sed 's/.* \([^ ]\+\) downloaded.*/\1/') 
                    for pkgname in $list_of_programs; do
                        cd "$XDG_AUR_HOME/$pkgname"
                        makepkg -ifs
                        [ $? -ne 0 ] && exit 1
                    done
                    : > "$tmp_out"
                else
                    echo "package '$1' was not found" >&2
                fi
            fi
            shift
        done
        ;;
    leftovers)
        log_lo=$(grep -Eo '/[[:graph:]]+\.pac(new|orig|save)' /var/log/pacman.log | sort -u)
        for i in $log_lo
        do
            if [ -e "$i" ] ; then
                ext=${i##*.}
                if [ "$ext" != "pacsave" ] ; then
                    echo -n "merge '$i' [y/N]? "
                    read answer
                    case "$answer" in
                        y|yes|Y|Yes)
                            vimdiff "${i%.*}" "$i"
                            ;;
                    esac
                fi
                echo -n "remove '$i' [y/N]? "
                read answer
                case "$answer" in
                    y|yes|Y|Yes)
                        sudorun rm "$i"
                        ;;
                esac
            fi
        done
        ;;
    page)
        while [ $# -gt 0 ] ; do
            uri=$(getinfos "$1" | grep -m 1 -o 'https://aur.*') > /dev/null 2>&1
            if [ -n "$uri" ] ; then
                $BROWSER $uri > /dev/null 2>&1
            else
                echo "package '$1' is not in AUR" >&2
            fi
            shift
        done
        ;;
    home)
        if [ $crawl_homes -eq 1 ] ; then
            pkg_list=$(pacman -Ssq "$@"; cower -sq "$@") 
            if [ -n "$pkg_list" ] ; then
                set $pkg_list
            fi
        fi
        counter=0
        while [ $# -gt 0 ] ; do
            uri=$(getinfos "$1" | grep -m 1 -o 'https\?://.*')
            if [ -n "$uri" ] ; then
                echo "$1: $uri"
                $BROWSER $uri > /dev/null 2>&1
                counter=$((counter+1))
            fi
            shift
            if [ $((counter % OWL_MAX_URL)) -eq 0 -a $counter -gt 0 -a $# -gt 0 ] ; then
                echo -n "continue [Y/n] ($# remaining)? "
                read answer
                [ -z "$answer" ] && answer='y'

                case "$answer" in
                    y|Y|yes|Yes)
                        :
                        ;;
                    *)
                        exit 0
                        ;;
                esac
            fi
        done
        ;;
    deps)
        pacman -Qi "$@" | grep -i '^depends on' | sed 's/[^:]\+: \(.*\)/\1/'
        ;;
    uses)
        pacman -Qii "$@" | grep -i '^required by' | sed 's/[^:]\+: \(.*\)/\1/'
        ;;
    binlist)
        pacman -Qlq "$@" | grep '/s\?bin/.'
        ;;
    liblist)
        pacman -Qlq "$@" | grep '/lib/.'
        ;;
    etclist)
        pacman -Qlq "$@" | grep '/etc/.'
        ;;
    manlist)
        pacman -Qlq "$@" | grep '/man./.'
        ;;
    doclist)
        pacman -Qlq "$@" | grep '/share/doc/[^/]\+/.'
        ;;
    cleanup)
        if [ ! -d "$XDG_AUR_HOME" ] ; then
            printf "%s\n" "the cache directory is invalid" >&2
            exit 1
        fi
        cd "$XDG_AUR_HOME"
        for pkgname in * ; do
            if [ -d "$pkgname" ] ; then
                pacman -Q "$pkgname" > /dev/null 2>&1
                [ $? -eq 1 ] && rm -vrf -- "$pkgname"
            fi
        done
        ;;
    foreigns)
        if [ $quiet_results -eq 1 ] ; then
            pacman -Qmq
        else
            pacman -Qm
        fi
        ;;
    orphans)
        if [ $quiet_results -eq 1 ] ; then
            pacman -Qdtq
        else
            pacman -Qdt
        fi
        ;;
    *)
        echo "action '$action' is unknown" >&2
        exit 1
        ;;
esac
